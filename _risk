#compdef _risk risk 
#autoload

# Entrypoint ================================================================================== 

_risk () 
{
    local cmd
    if (( CURRENT > 2 )); then
        cmd=${words[2]}
        # Set the context for the subcommand
        curcontext="${curcontext%:*:*}:risk-$cmd"
        # Narrow the range of words we are looking at to exclude `risk`
        (( CURRENT-- ))
        shift words
        # Run the completion for the subcommand
        case "${cmd}" in
            (help)      _help ;;
            (hush)      _hush ;;
            (backup)    _backup ;;
            (identity)  _identity ;;
            (vpn)       _vpn ;;
            (config)    _config ;;
            (qube)      _qube ;;
            (use)       _use ;;
            (url)       _url ;;
        esac
    else
        local ret=1
        local line state

        _arguments -C \
            "${_flags_base[@]}" \
            "*: :_risk_commands" \
            && ret=0
    fi
}

# Subcomands ==================================================================================

# Completes subcommands of the risk CLI.
_risk_commands ()
{
    local -a subcmds
    subcmds=(
        'help:Show help about a command'
        'hush:Attach or detach the hush partition to vault'
        'backup:Attach or detach a backup partition to vault'
        'identity:Create, manage and use identities and/or use their machines'
        'vpn:Create, configure, manage and use VPN gateways for an identity'
        'slam:Close identity and/or associated stores in the vault only, and detach hush/backup'
        'config:Manage the global risk configuration settings from the CLI'
        'use:Execute a command in a VM belong to an identity'
        'qube:Manage generic qubes (identity qubes, update/enable/disable, etc)'
        'url:Browse, bookmark, verify and manage URLS/links'
    )

    _describe -t commands 'commands' subcmds
}

# Completes the commands for config
_config_commands ()
{
    local -a subcmds 
    subcmds=(
        'set:Set a key in the configuration file'
        'unset:Unset a key in the configuration file (becomes empty)'
        'get:Show the value of a key in the configuration'
        'list:Show all keys in the configuration'
    )

    _describe -t commands 'config commands' subcmds && ret=0
}

# Completion dispatcher for config subcommand
_config ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_config_commands" \
        "*::arg:->args" \
        && ret=0

    # And depending on the kv subcommand entered, complete accordingly
    case $state in
        args)
            case $line[1] in
                set)
                    _arguments -C "1:key:_config_keys" "2:value:" && ret=0
                    ;;
                get|unset)
                    _arguments -C "1:key:_config_keys" && ret=0 # TODO complete existing keys ?"
                    ;;
            esac
    esac
}

# Completes the commands for hush, without parameters
_hush_commands () 
{
    local -a hushcmds 
    hushcmds=(
        'attach:Attach the hush drive to vault'
        'detach:Detach the hush drive from vault'
    )

    _describe -t commands 'hush commands' hushcmds && ret=0
}

# Completion dispatcher for hush subcommand
_hush ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "1: :_hush_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                attach)
                    _arguments \
                        '(--mount -m)'{-m,--mount}'[Mount the hush device in the vault (prompts for password)]' \
                        '1:hush block device:_block_devices' \
                        '2:vault VM:_known_vms'
                    ;;
                detach)
                    _arguments \
                        '1:hush block device:_block_devices_attached' '2:vault VM:_known_vms'
                    ;;
            esac
    esac
}

# Completes the commands for backup, without parameters
_backup_commands () 
{
    local -a subcmds 
    subcmds=(
        'attach:Attach a backup drive to vault'
        'detach:Detach the backup drive from vault'
    )

    _describe -t commands 'backup commands' subcmds && ret=0
}

# Completion dispatcher for backup subcommand
_backup ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "1: :_backup_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                attach)
                    _arguments '1:backup block device:_block_devices' '2:vault VM:_known_vms'
                    ;;
                detach)
                    _arguments '1:backup block device:_block_devices_attached' '2:vault VM:_known_vms'
                    ;;
            esac
    esac
}

# Subcommands of the identity command
_identity_commands ()
{
    local -a subcmds 
    subcmds=(
        'open:Open an identity and its associated builtin stores in the vault'
        'create:Create associated qubes for an identity (joe-gw, joe-vpn, joe-msg, joe-web, etc)'
        'delete:Destroys an identity and all its associated machines and data'
        'close:Simply close the identity stores in the vault'
        'start:Start the identity in the vault and all of its enabled qubes'
        'stop:Stops all machines belonging to an identity, and close its vault if active'
        'equip:Creates the default infrastructure for an already exiting identity'
        'nake:Delete the qubes belonging to an identity, but not the identity in the vault'
    )
    _describe -t commands 'identity commands' subcmds && ret=0
}

# Completion dispatcher for identity command
_identity ()
{
    local line state

    _arguments -C \
        "1: :_identity_commands" \
        "*::arg:->args"

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                create)
                    _identity_create
                    ;;
                equip)
                    _arguments -C \
                        "${_flags_vm_base[@]}" \
                        "${_flags_init_tor[@]}" \
                        "${_flags_init_web[@]}" \
                        '1:identity name:' && ret=0
                    ;;
                start|open|nake)
                    _arguments '1:identity name:' && ret=0
                    ;;
                delete)
                    _arguments -C \
                        '(-b --backup)'{-b,--backup}'[If a backup device is mounted, also delete all the associated backup data]' \
                        '1:identity to delete:' && ret=0
                    ;;
            esac
    esac
}

# Completions for the identity create command
_identity_create ()
{
    local line state

    _arguments -C \
        '--vault-only[Only create the identity in the vault: do not create any machines]' \
        '(-b --backup)'{-b,--backup}'[Device file of the backup drive (whole drive without partition number, eg. /dev/sdb)]:path to backup device in vault:($(_vault_devices))' \
        '(-m --mail)'{-m,--mail}'[Mail provider to use for the GPG key (appended to the name when no full mail is given as arg)]:mail provider (without @):' \
        '(-B --burner)'{-B,--burner}'[Generate a random username, and only generate GPG/Pass stores]' \
        "${_flags_vm_base[@]}" \
        "${_flags_init_tor[@]}" \
        "${_flags_init_web[@]}" \
        '1:identity name:->name' \
        "2:email recipient:->recipient" \
        "3:key expiry:->duration" \
        && ret=0

    # Indications for the create identity command
    case "$state" in
        name)
            _message "quoted string of the name, if spaces (optional if --burner)"
            ;;
        recipient)
            _message "mail address recipient to use for GPG (optional)" 
            ;;
        duration)
            _message "quoted, human readable expiry duration for GPG keys (empty: no expiry)" 
            ;;
    esac
}

# Subcommands of the vpn command
_vpn_commands ()
{
    local -a subcmds 
    subcmds=(
        'create:Create VPN gateway from a template, or by cloning an existing one'
        'add:Add an existing qube as an identity VPN gateway'
        'setup:Manage, import network configurations and run associated setup wizards'
        'enable:Automatically start a VPN gateway when starting the identity'
        'disable:Do not autostart this VM when the identity is started'
        'start:Start a VPN gateway in the background'
        'stop:Stop a VPN gateway'
        'delete:Delete a VPN gateway'
    )
    _describe -t commands 'vpn commands' subcmds && ret=0
}

# Completion dispatcher for vpn command
_vpn ()
{
    local ret=1
    local line state

    _arguments -C \
        "1: :_vpn_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                create)
                    _arguments -C \
                        "${_flags_vm_base[@]}" \
                        "${_flags_create_base[@]}" \
                        "${_flags_network[@]}" \
                        "${_flags_vpn[@]}" \
                        '1::VPN gateway name (optional):' && ret=0
                    ;;
                add)
                    _arguments -C \
                        "${_flags_network[@]}" \
                        "${_flags_vpn[@]}" \
                        '(-E --enable)'{-E,--enable}'[Autostart this VM when the identity is started]' \
                        '1::VM to tag with identity settings:_known_vms' \
                        && ret=0
                    ;;
                setup)
                    _arguments "${_flags_vpn[@]}" "${_flags_network[@]}" \
                        '1:VPN gateway name:_identity_vpns' && ret=0
                    ;;
                enable)     _arguments '1:VPN gateway name:_disabled_vpns' && ret=0
                    ;;
                disable)    _arguments '1:VPN gateway name:_enabled_vpns' && ret=0
                    ;;
                start)      _arguments '1:VPN gateway name:_halted_identity_vpns' && ret=0
                    ;;
                stop)       _arguments '1:VPN gateway name:_running_identity_vpns' && ret=0
                    ;;
                delete)     _arguments '1:VPN gateway name:_identity_vpns' && ret=0
                    ;;
            esac
    esac
}

# Completion for use command
_use ()
{
    local ret=1
    local line state

    _arguments -C \
        "1:VM to use:_structured_vms" \
        "*::command arguments:" \
        && ret=0
    }

# Subcommands for the qube command
_qube_commands ()
{
    local -a subcmds 
    subcmds=(
        'add:Tag an existing VM as belonging to the active identity, and change its netVM if one is already set'
        'delete:Delete a VM belonging to the current identity'
        'enable:Enable an identity VM to autostart'
        'disable:Disable an identity VM from autostart'
        'list:Show qubes belonging to the active identity, and related global settings'
        'update:Update one or more VM templates, by name patterns or filters'
        'dist-upgrade:Upgrade the distribution of a Qube template'

    )
    _describe -t commands 'vm commands' subcmds && ret=0
}

# Completion dispatcher for qube command
_qube ()
{
    local ret=1
    local line state

    _arguments -C \
        "1: :_qube_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                add)
                    _arguments -C \
                        "${_flags_network[@]}" \
                        '(-E --enable)'{-E,--enable}'[Autostart this VM when the identity is started]' \
                        '--default-netvm[Set this VM as the default NetVM for all client machines for identity (browser, messaging, etc)]' \
                        '1::VM to tag with identity settings:_known_vms' \
                        && ret=0
                    ;;
                delete)
                        _arguments '1:VM to delete:_identity_vms' && ret=0
                    ;;
                enable)
                    _arguments '1:VM to enable for autostart:_disabled_identity_vms' && ret=0
                    ;;
                disable)
                _arguments '1:Disable an identity VM to autostart:_enabled_identity_vms' && ret=0
                    ;;
                update)
                    _domain_vm_keywords
                    _known_vms
                    ;;
                dist-upgrade)
                    _arguments -c \
                        '1:Name of VM or template to upgrade (if VM, risk will use its template):_known_vms' \
                        '2:Name or number of distribution to upgrade to (eg. 37 for Fedora, or bookworm for Debian)' \
                        && ret=0
                    ;;
            esac
    esac
}

# url management helper commands
_url_commands () 
{
    local -a subcmds 
    subcmds=(
        'open:Open a target URL into a target VM, or bookmarks with no arguments'
        'bookmark:Add an onion to the user/system bookmarks without verifying it'
        # 'verify:Verify the authenticity/signatures and reputation of an onion URL'
        # 'blacklist:Add an onion to the system list of blacklisted onions'
        # 'news:refresh the authenticity files, refered links and current news for an onion'
    )
    _describe -t commands 'url commands' subcmds && ret=0
}

# Completion dispatcher for url commands
_url ()
{
    local ret=1
    local line state

    _arguments -C \
        "1: :_url_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
                verify)
                    _arguments -C \
                        '1:url/onion:' \
                        && ret=0
                    ;;
                bookmark)
                    _arguments -C \
                        '(-u --user)'{-u,--user}'[Add to identity bookmarks]' \
                        '(-s --system)'{-s,--system}'[Add to system-wide (all identities) bookmarks]' \
                        '1:url/onion:' \
                        '2:URL name:' \
                        && ret=0
                    ;;
                open|blacklist|news)
                    _identity_bookmarks
                    _system_bookmarks
                    ;;
            esac
    esac
}


# Flags =======================================================================================

# Flags that are present on all commands
_flags_base=(
    '(- : *)'--version'[Print risks version and exit]' \
        '(- : *)'{-h,--help}'[Print help for the command]'
            '(-v --verbose)'{-v,--verbose}'[Enable verbose logging]'
            '(-l --log-file)'{-l,--log-file}'[Path to log file]:log file:_files'
        )

## Base flags needed when creating/cloning a VM
_flags_vm_base=(
    '(-P --prefix)'{-P,--prefix}'[Use a different name for naming identity qubes]:VM base name:' 
    '(-L --label)'{-L,--label}'[Specify a label color to be used for ALL subsequently created qubes]:VM label:' 
)

_flags_create_base=(
    '(-c --clone)'{-c,--clone}'[Instead of creating the VPN gateway from a template, clone an existing VPN AppVM]'
    '(-f --from)'{-f,--from}'[VM to clone instead of the default VPN_VM configuration setting]:AppVM:_known_vms'
    '(-T --template)'{-T,--template}'[TemplateVM to use for creating the VM]:TemplateVM:_template_vms'
    '(-E --enable)'{-E,--enable}'[Autostart this VM when the identity is started]'
)

# flags used for setting a VM connectivity
_flags_network=(
    '(-n --netvm)'{-n,--netvm}'[NetVM to use for the gateway]:NetVM:_known_vms'
)

# flags used to manipulate VPN settings
_flags_vpn=(
    '(--choose)--config-in[VM in which to browse for VPN configuration(s)]:VM containing configs:_known_vms'
    '(--config-in)--choose[Choose an existing client config by running the setup wizard in the VPN VM]'
    '--set-default[Set this VM as the default NetVM for all client machines for identity (browser, messaging, etc)]'
)

# The following flags groups are used only in the 'identity create' command,
# since the command normally creates a bunch of different vms: most of these
# flags are made to slightly change these default qubes' settings.
_flags_init_tor=(
    '(--clone-tor-from -t --no-tor)'{-t,--no-tor}'[Do not create a Whonix TOR gateway]' 
    '(-t --no-tor --clone-tor-from)'--clone-tor-from"[Instead of creating the TOR gateway from a template, clone an existing TOR AppVM]:VM:_known_vms"
)

_flags_init_web=(
    '--clone-web-from[Instead of creating the Web browsing VM from a template, clone an existing browser AppVM]:VM:_known_vms'
    '--clone-split-from[Instead of creating the split-browser VM from a template, clone an existing one]:VM:_known_vms'
)

# Command arguments ===========================================================================

# Completes qubes-style block devices
_block_devices () 
{
    local -a blocks

    IFS=$'\n' devices=($(qvm-block list))
    IFS=$'\t\n'

    for device in "${devices[@]}"; do
        id=$(echo $device | awk 'END {print $1}' | sed 's/\:/\\:/g') 
        desc=$(echo $device | awk 'END {print $2}'| sed 's/\:/\\:/g') 

        blocks+=("$id:${desc}")
    done

    _describe -t arguments 'block devices' blocks && ret=0
}

# Completes attached block devices
_block_devices_attached () 
{
    local -a blocks

    IFS=$'\n' devices=($(qvm-block list))
    IFS=$'\t\n'

    for device in "${devices[@]}"; do
        id=$(echo $device | awk 'END {print $1}' | sed 's/\:/\\:/g') 
        desc=$(echo $device | awk 'END {print $2}'| sed 's/\:/\\:/g') 
        vm=$(echo $device | awk 'END {print $4}'| sed 's/\:/\\:/g') 

        [[ -n "$vm" ]] && blocks+=("$id:${desc} [=> ${vm}]")
        # [[ "$vm" == "$(risk config get VAULT_VM)" ]] && blocks+=("$id:${desc}")
    done

    _describe -t arguments 'block devices' blocks && ret=0
}

# Completes device partitions directly in vault VM.
_vault_devices ()
{
    local vault_vm exclude_devices devices
    vault_vm=$(risk config get VAULT_VM)
    exclude_devices="xvda|xvdb|xvdc|xvdd"
    devices=($(qvm-run --pass-io "$vault_vm" 'ls /dev/xvd*' | grep -Ev "($exclude_devices)" ))
    echo "${devices[@]}"
}

# returns all qubes detected on the Qubes system.
_known_vms ()
{
    local ret=
    # VMS
    local VM_COMPLETIONS=()
    while IFS= read -r VM_NAME ; do
        VM_COMPLETIONS+=("${VM_NAME}")
    done < <(qvm-ls --raw-list | sort)

    _alternative "qubes:qubes:($VM_COMPLETIONS)"
}

# returns all qubes templates.
_template_vms ()
{
    local ret=
    # VMS
    local VM_COMPLETIONS=()
    while IFS='|' read VM_NAME VM_CLASS; do
        [[ $VM_CLASS != TemplateVM ]] && continue
        VM_COMPLETIONS+=("${VM_NAME}")
    done < <(qvm-ls --raw-data --fields name,class | sort)

    _alternative "templates:templates:($VM_COMPLETIONS)"
}

# returns all qubes that can be updated. Quite slow to return results.
_updateable_vms ()
{
    local ret=
    # VMS
    local VM_COMPLETIONS=()
    local updateable_vms=()
    while IFS= read -r VM_NAME ; do

        VM_COMPLETIONS+=("${VM_NAME}")
    done < <(qvm-ls --raw-list | sort)

    for vm in "${VM_COMPLETIONS[@]}"; do
        if [[ "$(qvm-prefs "${vm}" updateable 2>/dev/null)" == True ]]; then
            updateable_vms+=( "${vm}" )
        fi
    done

    _alternative "updateable qubes:updateable qubes:($updateable_vms)"
}

# Returns all the qubes belonging to the active identity
_identity_vms ()
{
    local proxies=() vms=()
    local browser_vm tor_gateway
    local vault_vm=$(risk config get VAULT_VM)

    proxies=($(_identity_proxies))
    vms=($(_identity_clients))

    tor_gateway="$(qvm-run --pass-io "${vault_vm}" 'risks kv get TOR_QUBE')"
    [[ -n ${tor_gateway} ]] && proxies+=( ${tor_gateway} )
    browser_vm="$(qvm-run --pass-io "${vault_vm}" 'risks kv get BROWSER_QUBE')"
    [[ -n ${browser_vm} ]] && vms+=( ${browser_vm} )

    [[ -z "${proxies}" ]] && [[ -z "${vms}" ]] \
        && _message "No qubes belong to this identity" && return

    _alternative "proxies:proxies:($proxies)"
    _alternative "other qubes:other qubes:($vms)"
}

# Returns all identity enabled qubes
_enabled_identity_vms ()
{
    vms=($(_identity_enabled_vms))
    proxies=($(_identity_proxies))

    enabled_vpns=($(echo "${proxies[@]}" "${vms[@]}" | tr ' ' '\n' | sort | uniq -d))
    [[ -n $enabled_vpns ]] &&  _alternative "enabled VPNs:enabled VPNs:($enabled_vpns)"

    enabled_vms=($(echo "${vms[@]}" "${enabled_vpns[@]}" | tr ' ' '\n' | sort | uniq -u))
    [[ -n $enabled_vms ]] && _alternative "enabled qubes:enabled qubes:($enabled_vms)"

    [[ -z "${enabled_vpns}" ]] && [[ -z "${enabled_vms}" ]] \
        && _message "No enabled qubes for this identity" && return
    }

# Returns all identity disabled qubes
_disabled_identity_vms ()
{
    local vault_vm=$(risk config get VAULT_VM)

    client_vms=($(_identity_clients))
    vms=($(_identity_enabled_vms))
    proxies=($(_identity_proxies))

    tor_gateway="$(qvm-run --pass-io "${vault_vm}" 'risks kv get TOR_QUBE')"
    [[ -n ${tor_gateway} ]] && proxies+=( ${tor_gateway} )
    browser_vm="$(qvm-run --pass-io "${vault_vm}" 'risks kv get BROWSER_QUBE')"
    [[ -n ${browser_vm} ]] && client_vms+=( ${browser_vm} )

    [[ -z "${proxies}" ]] && [[ -z "${vms}" ]] \
        && _message "No qubes belong to this identity" && return

    disabled_vpns=($(echo "${proxies[@]}" "${vms[@]}" | tr ' ' '\n' | sort | uniq -u))
    [[ -n $disabled_vpns ]] && _alternative "disabled VPNs:disabled VPNs:($disabled_vpns)"

    disabled_vms=($(echo "${client_vms[@]}" "${vms[@]}" | tr ' ' '\n' | sort | uniq -u))
    [[ -n $disabled_vms ]] && _alternative "disabled qubes:disabled qubes:($disabled_vms)"
}

# Returns the list of running VPN gateways for the active identity.
_running_identity_vpns ()
{
    # Get the list of gateways, either for active identity or all
    proxies=($(_identity_proxies))

    # Diff it with the list of running qubes
    read -d '' -r -A running_all < <(qvm-ls --raw-list --running)
    running_proxies=($(echo "${proxies[@]}" "${running_all[@]}" | tr ' ' '\n' | sort | uniq -D | uniq))

    # Return it
    if [[ "${#running_proxies[@]}" -eq 0 ]]; then
        _message "no running VPN gateways for identity"
    else
        _arguments -C "1:running proxy qubes:($running_proxies)"
    fi
}

# Returns all VPNs for the active identity that are powered off.
_halted_identity_vpns ()
{
    # Get the list of gateways, either for active identity or all
    proxies=($(_identity_proxies))

    # Diff it with the list of running qubes
    read -d '' -r -A halted_all < <(qvm-ls --raw-list --halted)
    halted_proxies=($(echo "${proxies[@]}" "${halted_all[@]}" | tr ' ' '\n' | sort | uniq -D | uniq))

    # Return it
    if [[ "${#halted_proxies[@]}" -eq 0 ]]; then
        _message "no halted VPN gateways for identity"
    else
        _arguments -C "1:halted proxy qubes:($halted_proxies)"
    fi
}

# Returns all proxy qubes for the active identity, running or not.
_identity_vpns ()
{
    proxies=($(_identity_proxies))

    if [[ "${#proxies[@]}" -eq 0 ]]; then
        _message "no VPN gateways for identity"
    else
        _arguments -C "1:proxy qubes:($proxies)"
    fi
}

# Returns all qubes that are marked autostart for the identity.
_enabled_vpns ()
{
    vms=($(_identity_enabled_vms))
    proxies=($(_identity_proxies))

    # Diff both
    enabled_vpns=($(echo "${proxies[@]}" "${vms[@]}" | tr ' ' '\n' | sort | uniq -u))

    if [[ "${#vms[@]}" -eq 0 ]]; then
        _message "no enabled VPN gateways"
    else
        _arguments -C "1:autostart enabled qubes:($vms)"
    fi
}

# Returns all qubes that are marked autostart for the identity.
_disabled_vpns ()
{
    vms=($(_identity_enabled_vms))
    proxies=($(_identity_proxies))

    # Diff both
    disabled_vpns=($(echo "${proxies[@]}" "${vms[@]}" | tr ' ' '\n' | sort | uniq))

    # Return
    if [[ "${#disabled_vpns[@]}" -eq 0 ]]; then
        _message "no disabled VPN gateways"
    else
        _arguments -C "1:disabled qubes:($disabled_vpns)"
    fi
}

# returns all running qubes for the active identity only
_running_identity_vms ()
{
    local identity_dir="$(_identity_dir)"
    # VPNs
    # Clients
}

# returns all qubes, but in different categories for identity and not
_structured_vms ()
{
    local -a identity_vms proxies client_vms other_vms 
    local vault_vm=$(risk config get VAULT_VM)

    client_vms=($(_identity_clients))
    proxies=($(_identity_proxies))
    [[ -n "${client_vms[*]}" ]] && identity_vms+=( "${client_vms[@]}" )
    [[ -n "${proxies[*]}" ]] && identity_vms+=( "${proxies[@]}" )

    tor_gateway="$(qvm-run --pass-io "${vault_vm}" 'risks kv get TOR_QUBE')"
    [[ -n ${tor_gateway} ]] && identity_vms+=( ${tor_gateway} )

    # First return the qubes belonging to the identity
    [[ -n "${identity_vms[*]}" ]] && _alternative "identity qubes:identity qubes:($identity_vms)"

    # Then diff it with the complete VM list
    read -d '' -r -A all_vms < <(qvm-ls --raw-list)
    other_vms=($(echo "${proxies[@]}" "${all_vms[@]}" | tr ' ' '\n' | sort | uniq -u))
    other_vms=($(echo "${client_vms[@]}" "${other_vms[@]}" | tr ' ' '\n' | sort | uniq -u))
    _alternative "other qubes:other qubes:($other_vms)"
}

# completes a list of VM distribution names, domains or other keywords
# to be used for commands such as risk qubes update whonix debian, etc.
_domain_vm_keywords ()
{
    # Add common distributions
    distros=(debian fedora whonix ks dom0 torbrowser cacher)
    _alternative "tools & distributions:tools & distributions:($distros)"
}

# Returns the keys found in the risk global configuration
_config_keys ()
{
    local keys
    keys=( $(risk config keys) )
    _arguments -C "1:configuration keys:($keys)"
}

# Completes all bookmarks saved for the current identity
_identity_bookmarks ()
{
}

# Completes all bookmarks saved for the current identity
_system_bookmarks ()
{
}

# Utils =======================================================================================

# Returns the directory of the current active identity
_identity_dir ()
{
    # Get the vault vm, and then the identity  directory
    local vault_vm active_identity identity_dir
    vault_vm=$(risk config get VAULT_VM)
    active_identity=$(qvm-run --pass-io "$vault_vm" 'risks identity active' 2>/dev/null)
    identity_dir="${HOME}/.risk/identities/${active_identity}"
    print ${identity_dir}
}

# Prints the active identity if any.
_active_identity ()
{
    local vault_vm active_identity

    vault_vm=$(risk config get VAULT_VM)
    active_identity=$(qvm-run --pass-io "$vault_vm" 'risks identity active' 2>/dev/null)
    print ${active_identity}
}

# Returns an array of identity proxies
_identity_proxies ()
{
    [[ -n "$(_active_identity)" ]] || return
    vault_vm=$(risk config get VAULT_VM)

    read -d '' -rA proxies < <(qvm-run --pass-io "${vault_vm}" 'risks kv get PROXY_QUBES')
    print "${proxies[@]}"
}

# Returns a list of all identity client qubes (excluding proxies)
_identity_clients ()
{
    [[ -n "$(_active_identity)" ]] || return
    vault_vm=$(risk config get VAULT_VM)

    read -d '' -rA client_vms < <(qvm-run --pass-io "${vault_vm}" 'risks kv get CLIENT_QUBES')
    print "${client_vms[@]}"
}

# Returns an array of identity enabled vms 
_identity_enabled_vms ()
{ 
    [[ -n "$(_active_identity)" ]] || return
    vault_vm=$(risk config get VAULT_VM)

    read -d '' -rA vms < <(qvm-run --pass-io "${vault_vm}" 'risks kv get AUTOSTART_QUBES')
    print "${vms[@]}"
}


# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_risk" ]; then
    _risk
fi
